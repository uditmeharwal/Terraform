--introduction to the docker--
docker create the environment where we can run our application ,docker is not use directly in production in it companies , it is open source tool , made by dot cloud 
virtualization vs containerization -> in virtualization we use v.m and in contanirization we use docker ,podma ,containerd
docker engin use host operating system to run app , it is very light weight
--docker architecture--
docker architecture -> docker engin - 
                    -> docker demon - it help to manage the containers -> demon use container d  in backed -> it is a tool  
                    -> docker cli -  command line interface 
                    -> docker client -> it communicate with demon and engin 


-> sudo systemctl status docker -check status 
-> sudo systemctl restart docker - restart docker 
->sudo systemctl start docker - for start server 
-> sudo usermod -aG docker $USER -for adding user to docker 
-> newgrp docker - for refreshing the system after adding user  
-> docker ps -show all contaier list 
-> docker images -show all the images 
-> docker login -login 
-> docker ps -a -> for see exited containers list 
-> for login using personal access token -> your profile > account setting > persnal access token > paste it in terminal
-> dockerfile-> docker image -> container
-> docker pull hello-world -for download sample image from internet 
-> docker run hello-world - for running the image 
-> docker rmi image-name -delete images 
-> docker rmi -f $(docker images -aq ) -> it will delete all images 
-> docker stop container-id -stop the container 
-> docker start container-id -start the container 
-> docker restart container-id - restart the container 
-> docker run -it image_id  - for run the interactive terminal programs 

-----------------------------------------------------------------------------
make a docker file -it is the file in which a set of instruction is available
-> create a folder name "project " and open it in terminal 
-> clone a project from git hub 
-> open the folder in terminal 
-> create a file name "Dockerfile" 
------------------------------------this is for java 
# stable official Java runtime base image
FROM openjdk:17-jdk-alpine

# metadata
LABEL maintainer="your-email@example.com"
LABEL version="1.0"
LABEL description="A simple Java application"

# working directory
WORKDIR /app

# Copy source code into the container
COPY src/Main.java /app/Main.java

# Compile the Java code
RUN javac Main.java

# Run the Java application when the container starts
CMD ["java", "Main"]
------------------------------------
-> docker build -t java-app . -> for building the image
-> docker run java-app -> for running app
   ------ if we want to update anything in source code of progeram so we need to recreate the docker build and then again run by using same command 
------------------------------------this is for python 
FROM python:3.7
WORKDIR /app
COPY . .
RUN pip install -r requirment.txt
ENTRYPOINT [ "python","run.py"]
--------------------------------------
-> docker logs container-id -> it will show the logs of the container
-> docker attcah container-id -> it will regularly show the logs 
-> docker exec -it container-id bash -> interactive terminal  
-----------------------------------------------------------------------------------------------------
--Docker Network--
-> host 
-> default Bridge
-> user defined bridge ( cutom bridge )  
-> none ( isolated  no access to any thing ) 
-> MACVLAN (Docker swam )(cluster )  -> communicate between two mac address 
-> IPVLAN
-> Overlay
-------------------------
-> Docker network ls ->  list of all network 
-> docker inspact custom-network-name -> for checking the details of custop natwork 
-> docker network create mynetwork -d bridge -> create custom bridge network
-> 
connection of tier-tier network 
-> go to git and clone two tier flask app in project folder 
-> use same command for build 
-> docker run -d -p 5000:5000 -e MYSQL_HOST=mysql -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_DB=devops flask-app:latest
-> docker run -d flask-app --network flask-app  -> for running the flask in a custom network 

-------------------------------------------------------------------------------------------------------Docker Volumes and Storage--it help to prevent the data lose from the storage which is of any app 
-> docker volume ls -show existing volumes 
-> docker volume create sample-volume  -create a volume
-> docker inspect sample-volume -show the location of volume 
-> docker run -v sample-volume:/var/lib.mysql -attach volume to the container 

---------------------------------------------------------------------------------------------------
--Docker Compose--it help in automate the things , it is configuration file written in yml(yet another markup language where we pass the key and values 
------------------------
--syntax--
version: "3.8"

services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: devops
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./message.sql:/docker-entrypoint-initdb.d/message.sql  
    networks:
      - twotier
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  flask-app:
    build:
      context: .
    container_name: flask-app
    ports:
      - "5000:5000"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_DB: devops
    depends_on:
      - mysql
    networks:
      - twotier
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  twotier:
-----------------------
steps to do in docker composer 
-> vim docker-composer -> creste the file name "docker-composer" and enter the step of code 
-> sudo apt-get install docker-compose-v2 -> install the requirments of "docker-compose"
-> docker compose up -> to run the file we use this command  
-> dokcer compose up -d -> it help to run the code in backend and create all the data 
-> docker compose down -> stop all the commands 
---------------------------------------------------------------------------------------------------
-> Docker Registry-- to push and tag our container we use registry
-> docker system prune -- use to delete all the containers and images 
-> docker image tag image-name - dockre image tag app:latest uditmeharwal/app:latest -> this is the proper way to write a tagging your account name should be mentioned before app name 
-> docker push uditmeharwal/app :latest  -this is how we can push app  
--------------------------------------------------------------------------------------------------
-- Multi stage docker buiding -- help to redue work load and size of file is reduce 
# Stage 1: Build Stage
FROM python:3.11-slim  as build-stage

# Set working directory for the build stage
WORKDIR /app

# Copy the requirements file into the container
COPY requirements.txt .

# Install dependencies (only the build dependencies needed to install Python packages)
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime Stage
FROM python:3.11-slim as runtime-stage

# Set working directory for the runtime stage
WORKDIR /app

# Copy only necessary files from build stage (no need for the entire build environment)
COPY --from=build-stage /app /app

# Install runtime dependencies (if necessary)
# For example, install system dependencies needed for your app (e.g., database client libraries)
# RUN apt-get update && apt-get install -y libpq-dev  # Example for PostgreSQL

# Copy the application code into the container
COPY . .

# Expose the port the app will run on
EXPOSE 5000

# Set the default command to run the application
CMD ["python", "app.py"]

------------------------------------------------------------------------------------------------------------------
-- Monitoring and loggin in docker --
-> docker log image id 
nohup command use to save all logs in a file 
---------------------------------------------------------------------------------------------------------------------------
project 1 :- 3 tier application with docker compose
--------------------------------------------------------
-> expensies tracker app is use and it is written in java 
--------------------------------------------------------
project 2 :- Deploying a web app with Nginx and My sql 
-------------------------------------------------------

-> ngnix -django -mysql -three technologies are use in this project so we need to create 3 containers 
-> open git hub and download django-notes-app gir repo from shubhamlondhe and download it 
-> 
-------------------------------------
Docker scout
it help in images scanning , check is there any security threat in your app 
-> docker scout quickview container images 
Docker init
it create ready made templet file of (docker file , docker composer ) by choosing the language
-> docker init 








